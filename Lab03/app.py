import os
from dotenv import load_dotenv
import streamlit as st
import requests

load_dotenv()
HF_TOKEN = os.getenv("HF_TOKEN")
st.write("HF_TOKEN:", HF_TOKEN)  # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –ø–æ–¥—Ö–≤–∞—Ç–∏–ª—Å—è

API_URL = "https://api-inference.huggingface.co/models/j-hartmann/emotion-english-distilroberta-base"
headers = {"Authorization": f"Bearer {HF_TOKEN}"}

def query(payload):
    response = requests.post(API_URL, headers=headers, json=payload)
    st.write("Status code:", response.status_code)
    st.write("Text response:", response.text)  # –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    try:
        return response.json()
    except Exception as e:
        return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç", "raw_response": response.text}

st.title("ü§ó Hugging Face API + Streamlit")
text = st.text_area("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç:")
if st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å") and text:
    output = query({"inputs": text})
    st.write(output)

# import streamlit as st
# import pandas as pd

# st.set_page_config(
#     page_title="–î–∞–Ω–Ω—ã–µ –¢–∏—Ç–∞–Ω–∏–∫–∞",
#     page_icon="üö¢",
#     layout="wide"
# )

# st.title("üö¢ –î–∞–Ω–Ω—ã–µ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –¢–∏—Ç–∞–Ω–∏–∫–∞")

# # –ó–∞–≥—Ä—É–∑–∫–∞ CSV —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
# uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤", type="csv")

# if uploaded_file is not None:
#     df_csv = pd.read_csv(uploaded_file)
#     st.subheader("üìä –î–∞–Ω–Ω—ã–µ –∏–∑ –≤–∞—à–µ–≥–æ CSV —Ñ–∞–π–ª–∞")
    
#     # –í—ã–±–æ—Ä –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
#     selected_columns = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", df_csv.columns.tolist(), default=df_csv.columns.tolist())
#     st.dataframe(df_csv[selected_columns], use_container_width=True)

#     st.markdown("---")

#     # –§–∏–ª—å—Ç—Ä –ø–æ –≤—ã–∂–∏–≤—à–∏–º
#     survived_option = st.selectbox(
#         "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤",
#         ["–í—Å–µ", "–°–ø–∞—Å–µ–Ω–Ω—ã–µ (1)", "–ü–æ–≥–∏–±—à–∏–µ (0)"]
#     )

#     if survived_option == "–°–ø–∞—Å–µ–Ω–Ω—ã–µ (1)":
#         df_filtered = df_csv[df_csv['Survived'] == 1]
#     elif survived_option == "–ü–æ–≥–∏–±—à–∏–µ (0)":
#         df_filtered = df_csv[df_csv['Survived'] == 0]
#     else:
#         df_filtered = df_csv

#     st.subheader("üìä –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
#     st.dataframe(df_filtered[selected_columns], use_container_width=True)

#     st.markdown("---")

#     # –ì—Ä–∞—Ñ–∏–∫–∏
#     st.subheader("üìà –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")

#     # –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
#     chart_option = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", ["–í–æ–∑—Ä–∞—Å—Ç –ø–æ –∫–ª–∞—Å—Å–∞–º", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –ø–æ –ø–æ–ª—É", "–í—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç—å –ø–æ –∫–ª–∞—Å—Å—É"])

#     if chart_option == "–í–æ–∑—Ä–∞—Å—Ç –ø–æ –∫–ª–∞—Å—Å–∞–º":
#         age_data = df_filtered.groupby('Pclass')['Age'].mean().reset_index()
#         st.bar_chart(data=age_data, x='Pclass', y='Age')

#     elif chart_option == "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –ø–æ –ø–æ–ª—É":
#         sex_data = df_filtered['Sex'].value_counts()
#         st.bar_chart(sex_data)

#     elif chart_option == "–í—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç—å –ø–æ –∫–ª–∞—Å—Å—É":
#         survival_data = df_filtered.groupby('Pclass')['Survived'].mean().reset_index()
#         st.bar_chart(survival_data, x='Pclass', y='Survived')

# else:
#     st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.")













