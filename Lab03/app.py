# import os
# from dotenv import load_dotenv
# import streamlit as st
# import requests

# load_dotenv()
# HF_TOKEN = os.getenv("HF_TOKEN")
# st.write("HF_TOKEN:", HF_TOKEN)  # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –ø–æ–¥—Ö–≤–∞—Ç–∏–ª—Å—è

# API_URL = "https://api-inference.huggingface.co/models/j-hartmann/emotion-english-distilroberta-base"
# headers = {"Authorization": f"Bearer {HF_TOKEN}"}

# def query(payload):
#     response = requests.post(API_URL, headers=headers, json=payload)
#     st.write("Status code:", response.status_code)
#     st.write("Text response:", response.text)  # –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
#     try:
#         return response.json()
#     except Exception as e:
#         return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç", "raw_response": response.text}

# st.title("ü§ó Hugging Face API + Streamlit")
# text = st.text_area("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç:")
# if st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å") and text:
#     output = query({"inputs": text})
#     st.write(output)

import streamlit as st
import pandas as pd
import numpy as np
import os


st.set_page_config(
    page_title="–î–∞–Ω–Ω—ã–µ –¢–∏—Ç–∞–Ω–∏–∫–∞",
    page_icon="üö¢",
    layout="wide"
)


st.title("üö¢ –î–∞–Ω–Ω—ã–µ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –¢–∏—Ç–∞–Ω–∏–∫–∞")


csv_path = "\Users\–î–∞–Ω–∏–ª\Downloads\titanic_train.csv"

if os.path.exists(csv_path):
    df_csv = pd.read_csv(csv_path)
    st.subheader("üìä –î–∞–Ω–Ω—ã–µ –∏–∑ –≤–∞—à–µ–≥–æ CSV —Ñ–∞–π–ª–∞")
    st.dataframe(df_csv, use_container_width=True)
    st.markdown("---")
else:
    st.info(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {csv_path}")

st.markdown("""
–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –ø–æ —Å–ø–∞—Å–µ–Ω–Ω—ã–º –∏–ª–∏ –ø–æ–≥–∏–±—à–∏–º, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø—É–Ω–∫—Ç –∏–∑ —Å–ø–∏—Å–∫–∞:
""")


survived_option = st.selectbox(
    "**–ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è Survived:**",
    ["–õ—é–±–æ–µ", "–°–ø–∞—Å–µ–Ω–Ω—ã–µ (1)", "–ü–æ–≥–∏–±—à–∏–µ (0)"],
    index=0
)


st.markdown("---")


data = {
    '–ö–ª–∞—Å—Å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è': ['1 –∫–ª–∞—Å—Å', '2 –∫–ª–∞—Å—Å', '3 –∫–ª–∞—Å—Å'],
    '–°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç': [38.2, 29.9, 25.1]
}

df = pd.DataFrame(data)


if survived_option == "–°–ø–∞—Å–µ–Ω–Ω—ã–µ (1)":
    df.insert(0, 'Survived', [1, 1, 1])
    st.subheader("üìä –î–∞–Ω–Ω—ã–µ –ø–æ —Å–ø–∞—Å–µ–Ω–Ω—ã–º –ø–∞—Å—Å–∞–∂–∏—Ä–∞–º")
elif survived_option == "–ü–æ–≥–∏–±—à–∏–µ (0)":
    df.insert(0, 'Survived', [0, 0, 0])
    st.subheader("üìä –î–∞–Ω–Ω—ã–µ –ø–æ –ø–æ–≥–∏–±—à–∏–º –ø–∞—Å—Å–∞–∂–∏—Ä–∞–º")
else:
    df.insert(0, 'Survived', [0, 1, 2])
    st.subheader("üìä –û–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–∞—Å—Å–∞–∂–∏—Ä–∞–º")


st.dataframe(
    df,
    use_container_width=True,
    hide_index=True
)


st.markdown("""
<style>
    .stDataFrame {
        font-size: 16px;
    }
    div[data-testid="stDataFrame"] table {
        width: 100%;
    }
</style>
""", unsafe_allow_html=True)


st.markdown("---")
st.markdown("""
**–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:**
- **Survived = 0** - –ø–∞—Å—Å–∞–∂–∏—Ä –ø–æ–≥–∏–±
- **Survived = 1** - –ø–∞—Å—Å–∞–∂–∏—Ä —Å–ø–∞—Å—Å—è
- –î–∞–Ω–Ω—ã–µ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Å—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –ø–æ –∫–ª–∞—Å—Å–∞–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
""")


with st.expander("üìà –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"):
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("1 –∫–ª–∞—Å—Å", "38.2 –ª–µ—Ç", "–°—Ç–∞—Ä—à–µ")
    
    with col2:
        st.metric("2 –∫–ª–∞—Å—Å", "29.9 –ª–µ—Ç", "–°—Ä–µ–¥–Ω–∏–π")
    
    with col3:
        st.metric("3 –∫–ª–∞—Å—Å", "25.1 –ª–µ—Ç", "–ú–ª–∞–¥—à–µ")¬†







